## git pull origin master --rebase

- `git merge` will be added the latest remote commit on the top in your local commit. so when you merge each time, a commit history has two branchs for local and remote.
- `git pull --rebase` will be added the latest remote commit right before in your local commit so a commit history can keep one branch. so it is easy to read the past commit history.

https://stackoverflow.com/questions/2472254/when-should-i-use-git-pull-rebase

> sometimes--by whatever reason--you think that it would actually be better if these two--remote and local--were one branch. Like in SVN. It is here where git pull --rebase comes into play. You no longer merge--you actually commit on top of the remote branch. That's what it actually is about.

- git merge the latest commit will add on the top your local branch. git pull --rebase is the latest commit

1. (develop) git pull // Gets the latest develop
2. (my-branch) git checkout my-branch // Switch a branch
3. (my-branch) git pull origin develop // REBASE BETWEEN develop and my-branch.
4. (my-branch) ==== When conflicts happens, fix them manually.
5. (my-branch) git add .
6. (my-branch) git rebase --continue
7. (my-branch) git reset origin/develop // SQUASH MULTIPLE COMMITS HERE!!!
8. (my-branch) git add .
9. (my-branch) git commit -m 'some commit message'
10. (my-branch) git push my-branch --no-verify --force

```js
git reset origin/master
```

## git reflog

- listed all the tips of branches

```js
// checking all logs
git reflog

//you can rollback at hash number 12345
git reset --hard 12345